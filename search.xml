<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>二分模板</title>
    <url>/2020/09/19/%E4%BA%8C%E5%88%86%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>板子</p>
<a id="more"></a>

<p>目前二分模板有很多种，我觉得 $l&lt;=r,l=mid+1,r=mid-1$ 是最好的，可以处理最大和最小的情况，判断无解也方便，但是需要记录ans。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=total,ans=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> could=check(mid);</span><br><span class="line">    <span class="keyword">if</span>(could&gt;=need)&#123;  <span class="comment">//此种为求最大值，如果求最小值则反之</span></span><br><span class="line">        l=mid+<span class="number">1</span>;</span><br><span class="line">        ans=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 Luogu P1280 [尼克的任务]</title>
    <url>/2020/10/23/%E9%A2%98%E8%A7%A3-Luogu-P1280-%E5%B0%BC%E5%85%8B%E7%9A%84%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1280">题目传送门</a></p>
<p>我们可以把每个时间看作一个点，每个任务就是一条边，那么最终我们只需要跑一遍DAG最短路，求出最短工作时间，最后用总时间减去最短工作时间求出答案。</p>
<a id="more"></a>

<p>解题步骤：</p>
<ol>
<li>对于一个任务，从<code>开始时间-1</code>的节点向<code>结束时间</code>连一条边，权值为<code>t</code>。</li>
<li>对于出度为0的点<code>i</code>，向<code>i+1</code>连一条边，权值为<code>0</code>。（即此时无任务可做）</li>
<li>跑一遍DAG最短路</li>
</ol>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="comment">//快读</span></span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>,num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> rd=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(rd))&#123;</span><br><span class="line">        <span class="keyword">if</span>(rd==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">        rd=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(rd))&#123;</span><br><span class="line">        num=num*<span class="number">10</span>+rd<span class="number">-48</span>;</span><br><span class="line">        rd=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f*num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt,head[<span class="number">10009</span>],nex[<span class="number">20009</span>],to[<span class="number">20009</span>],w[<span class="number">20009</span>],dp[<span class="number">10009</span>];<span class="comment">//邻接表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    nex[++cnt]=head[x];</span><br><span class="line">    head[x]=cnt;</span><br><span class="line">    to[cnt]=y;</span><br><span class="line">    w[cnt]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp_dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[x]!=<span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> dp[x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=nex[i])&#123;</span><br><span class="line">        dp[x]=min(dp_dfs(to[i])+w[i],dp[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">int</span> n=read(),k=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=read(),t=read();</span><br><span class="line">        add(x<span class="number">-1</span>,x+t<span class="number">-1</span>,t);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[n]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(!head[i]) add(i,i+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n-dp_dfs(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>图论</tag>
        <tag>DAG</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>考前注意事项</title>
    <url>/2020/11/04/%E8%80%83%E5%89%8D%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>记得看看</p>
<a id="more"></a>

<ul>
<li>线段树记得开四倍数组</li>
<li>树链剖分加线段树时注意dfs序的映射</li>
<li>1左移31位以上记得先给1强制类型转换</li>
<li>INF为 <code>0x3f3f3f3f</code></li>
<li>分组背包记得循环顺序</li>
<li>不要在for里面对 <code>i</code> 之类的变量瞎搞</li>
<li><code>priority_queue</code> 是大根堆</li>
<li>RP++</li>
</ul>
]]></content>
      <tags>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>Dijkstra 单源最短路</title>
    <url>/2020/11/05/Dijkstra-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
    <content><![CDATA[<p>一种高效率的单源最短路算法 <del>（SPFA的继任者）</del></p>
<a id="more"></a>

<p><a href="https://www.luogu.com.cn/problem/P4779">板子题传送门</a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>待填坑Orz</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>,num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> rd=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(rd))&#123;</span><br><span class="line">        <span class="keyword">if</span>(rd==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">        rd=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(rd))&#123;</span><br><span class="line">        num=num*<span class="number">10</span>+rd<span class="number">-48</span>;</span><br><span class="line">        rd=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f*num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt,head[<span class="number">100090</span>],nex[<span class="number">800900</span>],to[<span class="number">800900</span>];</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">800900</span>],dis[<span class="number">100090</span>];<span class="comment">//看好数据范围，血的教训</span></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">100090</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    nex[++cnt]=head[x];</span><br><span class="line">    head[x]=cnt;</span><br><span class="line">    to[cnt]=y;</span><br><span class="line">    w[cnt]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num,val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;b) <span class="keyword">const</span>&#123;<span class="comment">//重载运算符</span></span><br><span class="line">        <span class="keyword">return</span> val&gt;b.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">node <span class="title">make_node</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    node a;</span><br><span class="line">    a.num=x;</span><br><span class="line">    a.val=y;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">priority_queue</span> &lt;node&gt; q;<span class="comment">//优先队列是大根堆</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> from)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=<span class="number">2147483647</span>;</span><br><span class="line">    q.push(make_node(from,<span class="number">0</span>));</span><br><span class="line">    dis[from]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.top().num;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nex[i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[to[i]]&gt;dis[u]+w[i])&#123;</span><br><span class="line">                dis[to[i]]=dis[u]+w[i];</span><br><span class="line">                q.push(make_node(to[i],dis[to[i]]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();<span class="keyword">int</span> u=read();</span><br><span class="line">    <span class="keyword">int</span> x,y,c;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        x=read(),y=read(),c=read();</span><br><span class="line">        add(x,y,c);</span><br><span class="line">    &#125;</span><br><span class="line">    solve(u);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>图论</tag>
      </tags>
  </entry>
</search>
